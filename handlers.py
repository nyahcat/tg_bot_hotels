from loader import bot, logger
from models import db
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from rapidapi import *
from telegram_bot_calendar import DetailedTelegramCalendar, static
from user_class import User
from models import UserHistory
from datetime import datetime, date, timedelta


__all__ = ['sc_start', 'Union', 'history_save_time', 'show_history', 'clear_history', 'patch']


def history_save_time(message: Union) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ë–î
    :param message: Union - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None.
    """
    user = User.get_user(message.chat.id)
    user.timestamp = datetime.now().strftime('%d.%m.%Y -- %H:%M:%S')
    logger.info(f'{history_save_time.__name__} succeed')


def sc_start(message: Union) -> None:
    """
    –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–∏—Å–∫–∞.
    :param message: Union - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None.
    """
    user = User.get_user(message.chat.id)
    if user.command and user.command_status is not False:
        user.command_status = False
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫:\n'
                                          '(–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞)')
        bot.register_next_step_handler(message, compare_cities)
    else:
        bot.send_message(message.chat.id, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∏—Å–∫–∞!')
        abort_scenario(message.chat.id)


def abort_scenario(user_id: str) -> None:
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
    :param user_id: str - ID —é–∑–µ—Ä–∞;
    :return: None.
    """
    logger.debug(f'user {user_id} started abort scenario')
    abort_keyboard = InlineKeyboardMarkup(row_width=2)
    yes_button = InlineKeyboardButton(text='–ü—Ä–µ—Ä–≤–∞—Ç—å',
                                      callback_data='sc_abort')
    no_button = InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π',
                                     callback_data='sc_continue')
    abort_keyboard.add(yes_button, no_button)
    bot.send_message(chat_id=user_id,
                     text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è?',
                     reply_markup=abort_keyboard)


@bot.callback_query_handler(func=lambda call: 'sc_' in call.data)
def abort_options(call: Union) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    logger.debug(f'abort options reached')
    logger.debug(f'calldata {call.data}')
    delete_button(call)

    if 'sc_abort' in call.data:
        User.del_user(call.message.chat.id)
        bot.send_message(text='–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–∏—Å–∫–∞\n'
                              '–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏',
                         chat_id=call.message.chat.id)
        logger.info(f'user {call.message.chat.id} aborted operation')
    elif 'sc_continue' in call.data:
        bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞',
                         chat_id=call.message.chat.id)
        logger.debug(f'user {call.message.chat.id} continued operation')


def patch(user_id: str) -> None:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ/—Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    :param user_id: str - ID —é–∑–µ—Ä–∞;
    :return: None.
    """
    user = User.get_user(user_id)
    if user_id in User.users and user.command is not None:
        patch_keyboard = InlineKeyboardMarkup(row_width=1)
        button = InlineKeyboardButton(text='–ü—Ä–µ—Ä–≤–∞—Ç—å',
                                      callback_data='sc_abort')
        patch_keyboard.add(button)
        bot.send_message(chat_id=user_id,
                         text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –º–µ—à–∞–π—Ç–µ –º–Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å :—Å\n'
                              '–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ –º–æ–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n'
                              '–Ø –º–æ–≥—É –ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ ',
                         reply_markup=patch_keyboard)
    else:
        bot.send_message(user_id, '–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É...ü§î\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏')


def delete_button(call: Union) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    bot.edit_message_reply_markup(message_id=call.message.id,
                                  chat_id=call.message.chat.id,
                                  reply_markup=None)


def compare_cities(message: Union) -> None:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: Union - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None.
    """
    try:
        user = User.get_user(message.chat.id)
        user.cities = get_city(ask_message=message.text)
        logger.info(f'get_city returned {user.cities}')
        keyboard = InlineKeyboardMarkup(row_width=len(user.cities))
        for city_id, city_name in user.cities.items():
            callback_str: str = f'::{city_id}'
            if len(callback_str) < 64:  # —Ä–∞–∑–º–µ—Ä callback_data –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-64 –±–∞–π—Ç
                button = InlineKeyboardButton(text=city_name, callback_data=callback_str)
                keyboard.add(button)
            else:
                continue
        bot.send_message(chat_id=message.chat.id,
                         text='–í—ã –∏—â–µ—Ç–µ:',
                         reply_markup=keyboard)
    except Exception as er:
        logger.error(er)
        bot.send_message(message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


@bot.callback_query_handler(func=lambda call: '::' in call.data)
def callback_city(call: Union) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    user = User.get_user(call.message.chat.id)
    if call.message:
        user.city_id = re.findall(r'::(\d+)', call.data)[0]
        user.city_name = user.cities.get(user.city_id)
        logger.info(f'callback_city result: {user.city_id}, {user.city_name}')

        next_markup = InlineKeyboardMarkup(row_width=1)
        if user.command == '/bestdeal':
            next_markup.add(InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—ã', callback_data='prices'))
        else:
            next_markup.add(InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã', callback_data='date_in'))

        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.id,
                              text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {user.city_name}',
                              reply_markup=next_markup)


@bot.callback_query_handler(func=lambda call: 'prices' in call.data)
def ask_prices(call: Union) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bestdeal).
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    delete_button(call)
    user = User.get_user(call.message.chat.id)
    bot.send_message(chat_id=call.message.chat.id,
                     text=f'–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∂–µ–ª–∞–µ–º–æ–π —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "min-max" (–≤ {user.currency}):\n'
                          f'–ù–∞–ø—Ä–∏–º–µ—Ä: 50-500')
    bot.register_next_step_handler(call.message, set_prices)


def set_prices(message: Union) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –∑–∞ –Ω–æ–º–µ—Ä –æ—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (min -> max).
    :param message: Union - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None.
    """
    user = User.get_user(message.chat.id)
    if '-' in message.text:
        price_range: List[str] = message.text.split('-')
        price_range.sort(key=lambda item: int(item.strip()))
        if len(price_range) == 2:
            min_price, max_price = price_range[0], price_range[1]
            if min_price.isdigit() and max_price.isdigit():
                next_markup = InlineKeyboardMarkup()
                next_markup.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='distances'))
                user.min_price, user.max_price = min_price, max_price
                bot.send_message(chat_id=message.chat.id,
                                 text=f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {user.min_price}-{user.max_price} {user.currency}',
                                 reply_markup=next_markup)
                logger.success(f'set_prices result: min {user.min_price}, max {user.max_price}')
                return

    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–ù–∞–ø—Ä–∏–º–µ—Ä: 50-500)')
    logger.warning('set_prices: wrong input')
    bot.register_next_step_handler(message, set_prices)


@bot.callback_query_handler(func=lambda call: 'distances' in call.data)
def ask_distance(call: Union) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç–µ–ª–µ–π –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    delete_button(call)
    bot.send_message(chat_id=call.message.chat.id,
                     text=f'–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–Ω–µ –±–æ–ª–µ–µ 15):\n'
                          f'–ù–∞–ø—Ä–∏–º–µ—Ä: 0.3 –∏–ª–∏ 2 –∏–ª–∏ 10.5')
    bot.register_next_step_handler(call.message, set_distance)


def set_distance(message: Union) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç–µ–ª–µ–π –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    :param message: Union - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None
    """
    user = User.get_user(message.chat.id)
    text_msg = message.text
    if text_msg.isdigit():
        if ',' in text_msg:
            text_msg = text_msg.replace(',', '.')
        if 0 <= eval(text_msg) <= 15:
            user.distance = text_msg
            next_markup = InlineKeyboardMarkup()
            next_markup.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='date_in'))
            bot.send_message(chat_id=message.chat.id,
                             text=f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ {user.distance} –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞',
                             reply_markup=next_markup)
            logger.success(f'set_distance result: {user.distance}')
            return

    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–¥–∏—É—Å –≤ –∫–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.3 –∏–ª–∏ 2 –∏–ª–∏ 10.5')
    logger.warning('set_distance: wrong input')
    bot.register_next_step_handler(message, set_distance)


@bot.callback_query_handler(func=lambda call: 'date_in' in call.data)
def show_calendar_in(call: Union) -> None:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–∞—Ç—ã –ø—Ä–∏–µ–∑–¥–∞.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∏—Å—Ö–æ–¥–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telegram_bot_calendar)
    static.DAYS_OF_WEEK['ru'] = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    delete_button(call)
    calendar, step = DetailedTelegramCalendar(calendar_id=1,
                                              min_date=date.today(),
                                              locale='ru',
                                              max_date=date.today() + timedelta(days=180)).build()
    bot.send_message(chat_id=call.message.chat.id,
                     text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:',
                     reply_markup=calendar)


@bot.callback_query_handler(func=lambda call: 'date_out' in call.data)
def show_calendar_out(call: Union) -> None:
    """"
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–∞—Ç—ã –æ—Ç—ä–µ–∑–¥–∞.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    delete_button(call)
    calendar, step = DetailedTelegramCalendar(calendar_id=2,
                                              min_date=date.today(),
                                              locale='ru',
                                              max_date=date.today() + timedelta(days=365)).build()
    bot.send_message(chat_id=call.message.chat.id,
                     text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞:',
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def calendar_in(call: Union) -> None:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–∞—Ç—ã –ø—Ä–∏–µ–∑–¥–∞.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    result, key, step = DetailedTelegramCalendar(calendar_id=1,
                                                 min_date=date.today(),
                                                 locale='ru',
                                                 max_date=date.today() + timedelta(days=365)).process(call.data)
    if not result and key:
        bot.edit_message_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–∑–¥–∞',
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=key)
    elif result:
        user = User.get_user(call.message.chat.id)
        next_markup = InlineKeyboardMarkup()
        next_markup.add(InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞', callback_data='date_out'))
        bot.edit_message_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}',
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=next_markup)
        user.check_in = result


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def calendar_out(call: Union) -> None:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–∞—Ç—ã –æ—Ç—ä–µ–∑–¥–∞.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    result, key, step = DetailedTelegramCalendar(calendar_id=2,
                                                 min_date=date.today(),
                                                 locale='ru',
                                                 max_date=date.today() + timedelta(days=365)).process(call.data)
    if not result and key:
        bot.edit_message_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞',
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=key)
    elif result:
        user = User.get_user(call.message.chat.id)
        next_markup = InlineKeyboardMarkup()
        next_markup.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='page_size'))
        bot.edit_message_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}',
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=next_markup)
        user.check_out = result
        if dates_check(call.message.chat.id):
            user.days_delta = (user.check_out - user.check_in).days
            user.check_in = user.check_in.strftime('%Y-%m-%d')
            user.check_out = user.check_out.strftime('%Y-%m-%d')


def dates_check(user_id) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    :param user_id: str - user id;
    :return: bool - —Ñ–ª–∞–≥ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç.
    """
    user = User.get_user(user_id)
    if user.check_in > user.check_out:
        user.check_in, user.check_out = user.check_out, user.check_in
        logger.info(f'dates swapped -> in: {user.check_in} out:{user.check_out}')
    return True


@bot.callback_query_handler(func=lambda call: 'page_size' in call.data)
def ask_page_size(call: Union) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    delete_button(call)
    bot.send_message(chat_id=call.message.chat.id,
                     text='–°–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–≤–µ—Å—Ç–∏? (–Ω–µ –±–æ–ª–µ–µ 10)')
    bot.register_next_step_handler(call.message, set_page_size)


def set_page_size(message: Union) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    :param message: Union - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None.
    """
    if message.text.isdigit():
        if 1 <= int(message.text) <= 10:
            user = User.get_user(message.chat.id)
            next_markup = InlineKeyboardMarkup()
            next_markup.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='display_photo'))
            user.page_size = message.text.strip()
            bot.send_message(chat_id=message.chat.id,
                             text=f'–ü–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ {user.page_size}',
                             reply_markup=next_markup)
            logger.success(f'set_page_size result: {user.page_size}')
            return

    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
    logger.warning('set_page_size: wrong input')
    bot.register_next_step_handler(message, set_page_size)


@bot.callback_query_handler(func=lambda call: 'display_photo' in call.data)
def display_photo(call: Union) -> None:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å—É –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    delete_button(call)
    yes_no_markup = InlineKeyboardMarkup()
    yes_no_markup.add(
        InlineKeyboardButton(text='–î–∞', callback_data='btn_yes'),
        InlineKeyboardButton(text='–ù–µ—Ç', callback_data='create_request'))
    bot.send_message(chat_id=call.message.chat.id,
                     text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º?',
                     reply_markup=yes_no_markup)


@bot.callback_query_handler(func=lambda call: 'btn_yes' in call.data)
def yes_callback(call: Union) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–¥–∞" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    delete_button(call)
    user = User.get_user(call.message.chat.id)
    user.display_photos = True
    logger.info(f'user {call.message.chat.id} display photos {user.display_photos}')
    ask_amount_photos(call.message)


def ask_amount_photos(message: Union) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    :param message: Union - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None.
    """
    bot.send_message(chat_id=message.chat.id,
                     text='–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã–≤–µ—Å—Ç–∏? (–ù–µ –±–æ–ª–µ–µ 5)')
    bot.register_next_step_handler(message, set_amount_photos)


def set_amount_photos(message: Union) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–ª–∞–≥–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ.
    :param message: Union - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    :return: None.
    """
    if message.text.isdigit():
        if 1 <= int(message.text) <= 5:
            user = User.get_user(message.chat.id)
            next_markup = InlineKeyboardMarkup()
            next_markup.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='create_request'))
            user.amount_photos = int(message.text.strip())
            bot.send_message(chat_id=message.chat.id,
                             text=f'–ü–æ–∫–∞–∂—É {user.amount_photos} —Ñ–æ—Ç–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)',
                             reply_markup=next_markup)
            logger.success(f'set_amount_photos result: {user.amount_photos}')
            return

    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
    logger.warning('set_amount_photos wrong input')
    bot.register_next_step_handler(message, set_amount_photos)


@bot.callback_query_handler(func=lambda call: call.data == 'create_request')
def create_request(call: Union) -> None:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ api.
    :param call: Union - –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏;
    :return: None.
    """
    delete_button(call)
    user = User.get_user(call.message.chat.id)
    querystring: Dict[str] = {
        "destinationId": user.city_id,
        "pageNumber": "1",
        "pageSize": user.page_size,
        "checkIn": user.check_in,
        "checkOut": user.check_out,
        "adults1": "1",
        "sortOrder": user.sort_order,
        "locale": user.locale,
        "currency": user.currency
    }

    if user.command == '/bestdeal':
        querystring["landmarklds"] = user.landmarklds
        querystring["pageSize"] = "25"

    if None in querystring.values():
        logger.error(f'querystring has None value\n{querystring}')
    else:
        bot.send_message(chat_id=call.message.chat.id,
                         text='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞–Ω—ã, –≤—ã–ø–æ–ª–Ω—è—é...')
        logger.info(f'querystring\n{querystring}')
        try:
            request_data = get_hotel_data(querystring, user_id=call.message.chat.id)
            data_sender(request_data, call.message.chat.id)
        except Exception as er:
            logger.exception(er)
            bot.send_message(chat_id=call.message.chat.id,
                             text=f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


def data_sender(hotels_data, user_id: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î.
    :param hotels_data: Optional[Iterator, List] - zip-–∏—Ç–µ—Ä–∞—Ç–æ—Ä (–∏–ª–∏ —Å–ø–∏—Å–æ–∫), —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç api;
    :param user_id: str - user id;
    :return: None.
    """
    user = User.get_user(user_id)
    if not hotels_data:
        bot.send_message(chat_id=user_id,
                         text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å :—Å\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞...')
        return

    if user.command == '/bestdeal' and user.display_photos:
        temp = list()
        for hotel in hotels_data:
            temp.append([*hotel[0], hotel[1]])
        hotels_data = temp

    for hotel in hotels_data:
        h_rating, h_name, h_address, h_distance, h_price_period, h_price_day, h_id = \
            hotel[0], hotel[1], hotel[2], hotel[3], hotel[4], hotel[5], hotel[6]

        hotel_message = f'‚≠ê–†–µ–π—Ç–∏–Ω–≥: {h_rating} \n' \
                        f'üè®–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {h_name}\n'\
                        f'üèô–ê–¥—Ä–µ—Å: {h_address}\n'\
                        f'üõ∫–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {h_distance}\n'\
                        f'üí∞–¶–µ–Ω–∞ –∑–∞ {user.days_delta} –¥–Ω–µ–π: {h_price_period} {user.currency}\n' \
                        f'üíµ–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å: {h_price_day} {user.currency}\n' \
                        f'üåè[–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–µ–ª—å](https://ru.hotels.com/ho{h_id}/' \
                        f'?q-check-in={user.check_in}&q-check-out={user.check_out}&q-room-0-adults=1)'
        logger.debug(f'hotel_message == {hotel_message}')
        bot.send_message(chat_id=user_id, text=hotel_message, disable_web_page_preview=True, parse_mode='Markdown')
        if user.display_photos:
            media_group = list()
            list_of_urls = hotel[7]
            for url in list_of_urls:
                media_group.append(InputMediaPhoto(media=url))
            bot.send_media_group(chat_id=user_id, media=media_group)
    logger.success(f'data send to {user_id}')

    """ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î """
    with db:
        UserHistory.create(user_id=user_id,
                           timestamp=user.timestamp,
                           command=user.command,
                           h_names=user.db_hotels,
                           h_urls=user.db_urls)
        logger.info(f'user {user_id} data saved')

    """ –£–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ """
    User.del_user(user_id)
    logger.info(f'user {user_id} removed from current users')


@logger.catch
def show_history(message: Union, user_id: str) -> None:
    """
    –í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param message: Union - —Å–æ–æ–±—â–µ–Ω–∏–µ;
    :param user_id: str - ID —é–∑–µ—Ä–∞;
    :return: None.
    """
    history_message = str()
    with db:
        if UserHistory.select().where(UserHistory.user_id == user_id):

            # –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ history –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            for item in UserHistory.select().where(UserHistory.user_id == user_id):
                time_strp = datetime.strptime(item.timestamp, '%d.%m.%Y -- %H:%M:%S')
                delta = (datetime.now() - time_strp).days
                # logger.info(f'time delta in db = {delta}')
                if delta > 14:
                    UserHistory.delete_instance(item)
                    logger.info(f'old user data {user_id} removed from db')
                    continue

                history_message += f'–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞: {item.command} \n–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {item.timestamp}\n' \
                                   f'–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n{"="*15}\n'
            hotels_zip = zip(eval(item.h_names), eval(item.h_urls))
            for hotel in hotels_zip:
                history_message += f'[{hotel[0]}]({hotel[1]})\n'

            logger.success(f'history send to {user_id}')

        else:
            history_message += '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç...'

    bot.send_message(chat_id=message.chat.id,
                     text=history_message,
                     disable_web_page_preview=True,
                     parse_mode='Markdown')


def clear_history(user_id: str) -> None:
    """
    –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    :param user_id: str - id —é–∑–µ—Ä–∞
    :return: None.
    """
    with db:
        if UserHistory.select().where(UserHistory.user_id == user_id):
            for item in UserHistory.select().where(UserHistory.user_id == user_id):
                UserHistory.delete_instance(item)
            status = '–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!'
            logger.success(f'history of {user_id} cleared')

        else:
            status = '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å :—Å'

        bot.send_message(chat_id=user_id,
                         text=status)
